/*
 * This file is generated by jOOQ.
 */

package edu.java.scrapper.domain.jooq.tables;

import edu.java.scrapper.domain.jooq.DefaultSchema;
import edu.java.scrapper.domain.jooq.Keys;
import edu.java.scrapper.domain.jooq.tables.records.ChatidlinkidRecord;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Chatidlinkid extends TableImpl<ChatidlinkidRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CHATIDLINKID</code>
     */
    public static final Chatidlinkid CHATIDLINKID = new Chatidlinkid();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<ChatidlinkidRecord> getRecordType() {
        return ChatidlinkidRecord.class;
    }

    /**
     * The column <code>CHATIDLINKID.CHAT_ID</code>.
     */
    public final TableField<ChatidlinkidRecord, Long> CHAT_ID =
        createField(DSL.name("CHAT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>CHATIDLINKID.LINK_ID</code>.
     */
    public final TableField<ChatidlinkidRecord, Long> LINK_ID =
        createField(DSL.name("LINK_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private Chatidlinkid(Name alias, Table<ChatidlinkidRecord> aliased) {
        this(alias, aliased, null);
    }

    private Chatidlinkid(Name alias, Table<ChatidlinkidRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>CHATIDLINKID</code> table reference
     */
    public Chatidlinkid(String alias) {
        this(DSL.name(alias), CHATIDLINKID);
    }

    /**
     * Create an aliased <code>CHATIDLINKID</code> table reference
     */
    public Chatidlinkid(Name alias) {
        this(alias, CHATIDLINKID);
    }

    /**
     * Create a <code>CHATIDLINKID</code> table reference
     */
    public Chatidlinkid() {
        this(DSL.name("CHATIDLINKID"), null);
    }

    public <O extends Record> Chatidlinkid(Table<O> child, ForeignKey<O, ChatidlinkidRecord> key) {
        super(child, key, CHATIDLINKID);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public UniqueKey<ChatidlinkidRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C32;
    }

    @Override
    @NotNull
    public List<ForeignKey<ChatidlinkidRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_C, Keys.CONSTRAINT_C3);
    }

    private transient Chat _chat;
    private transient Link _link;

    /**
     * Get the implicit join path to the <code>PUBLIC.CHAT</code> table.
     */
    public Chat chat() {
        if (_chat == null) {
            _chat = new Chat(this, Keys.CONSTRAINT_C);
        }

        return _chat;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.LINK</code> table.
     */
    public Link link() {
        if (_link == null) {
            _link = new Link(this, Keys.CONSTRAINT_C3);
        }

        return _link;
    }

    @Override
    @NotNull
    public Chatidlinkid as(String alias) {
        return new Chatidlinkid(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Chatidlinkid as(Name alias) {
        return new Chatidlinkid(alias, this);
    }

    @Override
    @NotNull
    public Chatidlinkid as(Table<?> alias) {
        return new Chatidlinkid(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Chatidlinkid rename(String name) {
        return new Chatidlinkid(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Chatidlinkid rename(Name name) {
        return new Chatidlinkid(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Chatidlinkid rename(Table<?> name) {
        return new Chatidlinkid(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
